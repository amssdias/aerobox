# Generated by Django 4.2.17 on 2025-06-15 15:12

from django.db import migrations

from apps.features.choices.feature_code_choices import FeatureCodeChoices


def create_basic_features(apps, schema_editor):
    Feature = apps.get_model("features", "Feature")

    try:
        basic_features = [
            {
                "code": FeatureCodeChoices.CLOUD_STORAGE,
                "name": {"en": "Cloud Storage", "es": "Almacenamiento en la Nube"},
                "description": {
                    "en": "Cloud file storage with upload support.",
                    "es": "Almacenamiento de archivos en la nube con soporte de subida."
                },
                "metadata": {
                    "max_storage_mb": 5000,
                    "max_file_size_mb": 200,
                    "blocked_file_types": [
                        "exe", "dll", "msi", "sh", "bat", "cmd", "com", "pif", "jar", "class",
                        "vb", "vbs", "apk", "iso", "img", "scr", "hta", "gadget", "wsf"
                    ]
                },
            },
            {
                "code":  FeatureCodeChoices.FILE_PREVIEW,
                "name": {"en": "File Preview", "es": "Vista Previa de Archivos"},
                "description": {
                    "en": "Preview supported files in the browser.",
                    "es": "Vista previa de archivos compatibles en el navegador."
                },
                "metadata": {
                    "preview_file_types": ["pdf", "jpg", "png", "txt"]
                },
            },
            {
                "code": FeatureCodeChoices.FILE_SHARING,
                "name": {"en": "File Sharing", "es": "Compartir Archivos"},
                "description": {
                    "en": "Share files via secure link.",
                    "es": "Comparte archivos mediante un enlace seguro."
                },
                "metadata": {
                    "default_share_duration_minutes": 120
                },
            },
            {
                "code": FeatureCodeChoices.FOLDER_CREATION,
                "name": {"en": "Folder Creation", "es": "Creaci칩n de Carpetas"},
                "description": {
                    "en": "Create folders to organize uploaded files.",
                    "es": "Crea carpetas para organizar los archivos subidos."
                },
                "metadata": {},
            },
            {
                "code": FeatureCodeChoices.BASIC_SUPPORT,
                "name": {"en": "Basic Support", "es": "Soporte B치sico"},
                "description": {
                    "en": "Basic email support for free-tier users.",
                    "es": "Soporte por correo electr칩nico b치sico para usuarios del plan gratuito."
                },
                "metadata": {
                    "support_email": "support@example.com"
                },
            },
        ]

        for feature_data in basic_features:
            Feature.objects.update_or_create(
                code=feature_data["code"],
                defaults={
                    "name": feature_data["name"],
                    "description": feature_data["description"],
                    "metadata": feature_data["metadata"],
                    "is_active": True,
                }
            )
    except Exception as e:
        raise RuntimeError("Failed to create basic features: " + str(e))

def delete_basic_features(apps, schema_editor):
    Feature = apps.get_model("features", "Feature")
    codes = [
        FeatureCodeChoices.CLOUD_STORAGE.value,
        FeatureCodeChoices.FILE_PREVIEW.value,
        FeatureCodeChoices.FILE_SHARING.value,
        FeatureCodeChoices.FOLDER_CREATION.value,
        FeatureCodeChoices.BASIC_SUPPORT.value,
    ]
    Feature.objects.filter(code__in=codes).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("features", "0003_alter_feature_description_alter_feature_name"),
    ]

    operations = [
        migrations.RunPython(create_basic_features, delete_basic_features)
    ]
